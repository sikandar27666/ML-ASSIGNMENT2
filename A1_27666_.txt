import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Load the training dataset
train_data = pd.read_csv('/content/Train.csv')

# Load the test dataset
test_data = pd.read_csv('/content/Test.csv')

# Extract features and target from the training data
X_train = train_data.drop(['Item_Id', 'Low_Cap_Price'], axis=1)
y_train = train_data['Low_Cap_Price']

# Extract features from the test data

X_test = test_data.drop(['Item_Id'], axis=1)

# Define preprocessing steps
categorical_features = ['State_of_Country', 'Product_Category', 'Grade']
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', categorical_transformer, categorical_features)
    ])

# Create a pipeline with preprocessing and linear regression
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Assuming 'Item_Id' is the identifier column in the test set
submission_df = pd.DataFrame({'Item_Id': test_data['Item_Id'], 'Low_Cap_Price': predictions})

# Save the predictions to a CSV file
submission_df.to_csv('/content/sample_submission.csv', index=False)

# Make predictions on the training set
train_predictions = model.predict(X_train)

# Calculate Mean Squared Error (MSE) and R-squared (R2) on the training set
train_mse = mean_squared_error(y_train, train_predictions)
train_r2 = r2_score(y_train, train_predictions)

print("Training MSE:", train_mse)
print("Training R-squared:", train_r2)
